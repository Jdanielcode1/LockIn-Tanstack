/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as AnotherPageRouteImport } from './routes/anotherPage'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TimelapseTimelapseIdRouteImport } from './routes/timelapse.$timelapseId'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects.$projectId'

const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const AnotherPageRoute = AnotherPageRouteImport.update({
  id: '/anotherPage',
  path: '/anotherPage',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TimelapseTimelapseIdRoute = TimelapseTimelapseIdRouteImport.update({
  id: '/timelapse/$timelapseId',
  path: '/timelapse/$timelapseId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdRoute = ProjectsProjectIdRouteImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => ProjectsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/anotherPage': typeof AnotherPageRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/timelapse/$timelapseId': typeof TimelapseTimelapseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/anotherPage': typeof AnotherPageRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/timelapse/$timelapseId': typeof TimelapseTimelapseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/anotherPage': typeof AnotherPageRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/timelapse/$timelapseId': typeof TimelapseTimelapseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/anotherPage'
    | '/projects'
    | '/projects/$projectId'
    | '/timelapse/$timelapseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/anotherPage'
    | '/projects'
    | '/projects/$projectId'
    | '/timelapse/$timelapseId'
  id:
    | '__root__'
    | '/'
    | '/anotherPage'
    | '/projects'
    | '/projects/$projectId'
    | '/timelapse/$timelapseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnotherPageRoute: typeof AnotherPageRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  TimelapseTimelapseIdRoute: typeof TimelapseTimelapseIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/anotherPage': {
      id: '/anotherPage'
      path: '/anotherPage'
      fullPath: '/anotherPage'
      preLoaderRoute: typeof AnotherPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/timelapse/$timelapseId': {
      id: '/timelapse/$timelapseId'
      path: '/timelapse/$timelapseId'
      fullPath: '/timelapse/$timelapseId'
      preLoaderRoute: typeof TimelapseTimelapseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof ProjectsRoute
    }
  }
}

interface ProjectsRouteChildren {
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnotherPageRoute: AnotherPageRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  TimelapseTimelapseIdRoute: TimelapseTimelapseIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
